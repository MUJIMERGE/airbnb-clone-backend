8월 27일 학습 내용 정리

------------------------------------------------------------------------

>>> from rooms.models import Room

>>> Room.objects
<django.db.models.manager.Manager object at 0x7f3b190ca2c0>

>>> Room.objects.all()
<QuerySet [<Room: Beautiful House in 의정부>]>

>>> Room.objects.get(name="Beautiful House in 의정부"
... )
<Room: Beautiful House in 의정부>


all() : 전체 결과를 가져옴
get() : 조건에 맞는 하나의 값을 가져옴

------------------------------------------------------------------------

>>> room = Room.objects.get(name="Beautiful House in 의정부")
>>> room.pk
1
>>> room.id
1
>>> room.name
'Beautiful House in 의정부'
>>> room.owner
<User: muji>
>>> room.price
1
>>> room.price = 20
>>> room.price
20
>>> room.save()


get 을 통해 가져온 데이터의 값을 변경한 후 DB에 저장하기 위해 save() 메소드 사용

------------------------------------------------------------------------

>>> Room.objects.all()
<QuerySet [<Room: Beautiful House in 의정부>, <Room: Apt. in 서울>]>

>>> for room in Room.objects.all():
...     print(room.name)
...
Beautiful House in 의정부
Apt. in 서울

>>> Room.objects.get(pk=1)
<Room: Beautiful House in 의정부>

------------------------------------------------------------------------

>>> Room.objects.get(pet_friendly=True)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "/home/muji/.cache/pypoetry/virtualenvs/airbnb-clone-backend-vtn8ZBFH-py3.10/lib/python3.10/site-packages/django/db/models/manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/home/muji/.cache/pypoetry/virtualenvs/airbnb-clone-backend-vtn8ZBFH-py3.10/lib/python3.10/site-packages/django/db/models/query.py", line 640, in get
    raise self.model.MultipleObjectsReturned(
rooms.models.Room.MultipleObjectsReturned: get() returned more than one Room -- it returned 2!

>>> Room.objects.get(pk=3)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "/home/muji/.cache/pypoetry/virtualenvs/airbnb-clone-backend-vtn8ZBFH-py3.10/lib/python3.10/site-packages/django/db/models/manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/home/muji/.cache/pypoetry/virtualenvs/airbnb-clone-backend-vtn8ZBFH-py3.10/lib/python3.10/site-packages/django/db/models/query.py", line 637, in get
    raise self.model.DoesNotExist(
rooms.models.Room.DoesNotExist: Room matching query does not exist.


get 을 사용한 결과가 1개가 아닌 경우(0개, 2개 이상 포함) 에러 발생

------------------------------------------------------------------------

>>> Room.objects.filter(pet_friendly=True)
<QuerySet [<Room: Beautiful House in 의정부>, <Room: Apt. in 서울>]>
>>> Room.objects.filter(pet_friendly=False)
<QuerySet []>


필터를 사용하면 조건에 맞는 값들을 모두 가져옴

------------------------------------------------------------------------

>>> Room.objects.filter(price__gt=15)
<QuerySet [<Room: Beautiful House in 의정부>]>


price 가 15보다 큰 값들을 가져옴
(gt, gte, lte 등...)

------------------------------------------------------------------------

>>> Room.objects.filter(name__contains="의정부")
<QuerySet [<Room: Beautiful House in 의정부>]>


이름에 의정부를 포함하는 값들을 가져옴

------------------------------------------------------------------------

>>> Room.objects.filter(name__startswith="Apt")
<QuerySet [<Room: Apt. in 서울>]>

이름이 서울로 Apt 로 시작하는 값들을 가져옴

------------------------------------------------------------------------

>>> from rooms.models import Amenity
>>> Amenity.objects.all()
<QuerySet [<Amenity: AA>]>

>>> Amenity.objects.create(name="Amenity from console", description="How cools is this!")
<Amenity: Amenity from console>


어메니티를 하나 생성함

------------------------------------------------------------------------

>>> to_delete = Amenity.objects.get(pk=3)
>>> to_delete
<Amenity: Amenity from console>
>>> to_delete.delete()
(1, {'rooms.Amenity': 1})


방금 생성한 어메니티를 삭제함

------------------------------------------------------------------------


8월 28일 학습 내용 정리

------------------------------------------------------------------------

QuerySet 연산자를 함께 묶어줌

>>> Room.objects.filter(pet_friendly=True)
<QuerySet [<Room: Beautiful House in 의정부>, <Room: Apt. in 서울>]>
>>> Room.objects.filter(pet_friendly=True).exclude(price__lt=15)
<QuerySet [<Room: Beautiful House in 의정부>]>
>>> Room.objects.filter(pet_friendly=True).exclude(price__lt=15).filter(name__contains="의정부")
<QuerySet [<Room: Beautiful House in 의정부>]>
>>> Room.objects.filter(pet_friendly=True, name__contains="서울")
<QuerySet [<Room: Apt. in 서울>]>
>>> Room.objects.filter(pet_friendly=True, name__contains="서울", price__gt=15)


QuerySet 으로 묶여있기 때문에 chaining 가능

QuerySet 은 lazy 함
-> 구체적으로 요청받았을 때에만 데이터를 줌
ex)
>>> Room.objects.all()
<QuerySet [<Room: Beautiful House in 의정부>, <Room: Apt. in 서울>]>

위의 코드는 DB 에서 목록만을 가져옴

>>> for room in Room.objects.all():
...     print(room.name)
...
Beautiful House in 의정부
Apt. in 서울

위의 코드는 가져온 목록에서 이름을 하나씩 가져옴


>>> Room.objects.filter(pet_friendly=True).count()
2

------------------------------------------------------------------------

lookup 함수
ex) filter(name__contains="의정부") -> 이름에 의정부를 포함하는 데이터만 가져옴

------------------------------------------------------------------------